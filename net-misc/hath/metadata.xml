<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<herd>haskell</herd>
	<maintainer>
		<email>haskell@gentoo.org</email>
	</maintainer>
	<longdescription>
		Hath is a Haskell program for working with network blocks in CIDR
		notation. When dealing with blocks of network addresses, there are a
		few things that one usually wants to do with them:
		
		* Create a regular expression matching the CIDR block(s). This is
		because grep will throw up if you feed it CIDR.
		
		* Combine small blocks into larger ones. For example, if you have two
		consecutive \/24s, they might combine into a larger \/23.
		
		* View the result of block combination in a useful way.
		
		Hath has four modes to perform these functions:
		
		[@Regexed@]
		This computes a (Perl-compatible) regular expression matching
		the input CIDR blocks. It&#39;s the default mode of operation.
		
		[@Reduced@]
		This combines small blocks into larger ones where possible, and
		eliminates redundant blocks. The output should be equivalent to
		the input, though.
		
		[@Duped@]
		Shows only the blocks that would be removed by reduce; that is, it
		shows the ones that would get combined into larger blocks or are
		simply redundant.
		
		[@Diffed@]
		Shows what would change if you used reduce. Uses diff-like
		notation.
		
		/Examples/:
		
		Combine two \/24s into a \/23:
		
		@
		$ hath reduced &lt;&lt;&lt; \&quot;10.0.0.0\/24 10.0.1.0\/24\&quot;
		10.0.0.0/23
		@
		
		Create a perl-compatible regex to be fed to grep:
		
		@
		$ grep -P `hath regexed -i cidrs.txt` mail.log
		@
	</longdescription>
</pkgmetadata>
