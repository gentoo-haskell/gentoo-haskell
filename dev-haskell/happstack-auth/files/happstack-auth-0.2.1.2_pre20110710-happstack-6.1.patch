diff --git a/src/Happstack/Auth.hs b/src/Happstack/Auth.hs
index 60e2102..9f4703d 100644
--- a/src/Happstack/Auth.hs
+++ b/src/Happstack/Auth.hs
@@ -282,7 +282,7 @@ type Minutes = Int
 -- > appRoute = updateTimeout 5 >> msum
 -- >     [ {- your routing here -}
 -- >     ]
-updateTimeout :: (MonadIO m, FilterMonad Response m, MonadPlus m, ServerMonad m, HasRqData m)
+updateTimeout :: (MonadIO m, FilterMonad Response m, MonadPlus m, ServerMonad m, HasRqData m, WebMonad Response m)
               => Minutes
               -> m ()
 updateTimeout mins = withSessionId action
@@ -314,7 +314,7 @@ performLogin mins user action = do
     localRq (\r -> r { rqCookies = (rqCookies r) ++ [(sessionCookie, cookie)] }) action
 
 -- | Handles data from a login form to log the user in.
-loginHandler :: (MonadIO m, FilterMonad Response m, MonadPlus m, ServerMonad m, HasRqData m)
+loginHandler :: (MonadIO m, FilterMonad Response m, MonadPlus m, ServerMonad m, HasRqData m, WebMonad Response m)
              => Minutes                                         -- ^ Session timeout
              -> Maybe String                                    -- ^ POST field to look for username (default: \"username\")
              -> Maybe String                                    -- ^ POST field to look for password (default: \"password\")
@@ -342,7 +342,7 @@ performLogout sid = do
     delSession sid
 
 
-logoutHandler :: (ServerMonad m, MonadPlus m, MonadIO m, FilterMonad Response m, HasRqData m)
+logoutHandler :: (ServerMonad m, MonadPlus m, MonadIO m, FilterMonad Response m, HasRqData m, WebMonad Response m)
               => m a    -- ^ Response after logout
               -> m a
 logoutHandler target = withSessionId handler
@@ -366,7 +366,7 @@ clearExpiredSessions = liftIO getClockTime >>= update . ClearExpiredSessions
 
 
 -- | Get the `SessionData' of the currently logged in user
-getSessionData :: (MonadIO m, MonadPlus m, ServerMonad m, HasRqData m)
+getSessionData :: (MonadIO m, MonadPlus m, ServerMonad m, HasRqData m, WebMonad Response m, FilterMonad Response m)
                => m (Maybe SessionData)
 getSessionData = do
     d <- withSessionId action
@@ -381,11 +381,11 @@ getSessionData = do
     action Nothing    = return Nothing
 
 -- | Get the identifier for the current session
-getSessionKey :: (MonadIO m, MonadPlus m, ServerMonad m, HasRqData m)
+getSessionKey :: (MonadIO m, MonadPlus m, ServerMonad m, HasRqData m, WebMonad Response m, FilterMonad Response m)
               => m (Maybe SessionKey)
 getSessionKey = withSessionId return
 
-withSessionId :: (Read a, MonadIO m, MonadPlus m, ServerMonad m, HasRqData m)
+withSessionId :: (Read a, MonadIO m, MonadPlus m, ServerMonad m, HasRqData m, WebMonad Response m, FilterMonad Response m)
               => (Maybe a -> m r)
               -> m r
 withSessionId f = do
