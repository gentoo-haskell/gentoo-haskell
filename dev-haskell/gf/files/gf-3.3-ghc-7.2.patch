--- gf-3.3-orig/src/compiler/GF/Text/Coding.hs	2011-10-26 06:03:38.000000000 +1100
+++ gf-3.3/src/compiler/GF/Text/Coding.hs	2011-11-05 21:23:20.989913886 +1100
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+
 module GF.Text.Coding where
 
 import qualified Data.ByteString as BS
@@ -23,7 +25,11 @@
   where
     translate cod cbuf
       | i < w     = do bbuf <- newByteBuffer 128 WriteBuffer
+#if __GLASGOW_HASKELL__ >= 702
+                       (_,cbuf,bbuf) <- cod cbuf bbuf
+#else
                        (cbuf,bbuf) <- cod cbuf bbuf
+#endif
                        if isEmptyBuffer bbuf
                          then ioe_invalidCharacter
                          else do let bs = PS (bufRaw bbuf) (bufL bbuf) (bufR bbuf-bufL bbuf)
@@ -46,7 +52,12 @@
                                             return s
   where
     translate cod bbuf cbuf
-      | i < w     = do (bbuf,cbuf) <- cod bbuf cbuf
+      | i < w     = do
+#if __GLASGOW_HASKELL__ >= 702
+                       (_,bbuf,cbuf) <- cod bbuf cbuf
+#else
+                       (bbuf,cbuf) <- cod bbuf cbuf
+#endif
                        if isEmptyBuffer cbuf
                          then ioe_invalidCharacter
                          else unpack cod bbuf cbuf
--- gf-3.3-orig/src/compiler/GF/Compile/GeneratePMCFG.hs	2011-10-26 06:03:37.000000000 +1100
+++ gf-3.3/src/compiler/GF/Compile/GeneratePMCFG.hs	2011-11-05 21:57:04.323363962 +1100
@@ -13,7 +13,10 @@
     (convertConcrete) where
 
 import PGF.CId
-import PGF.Data hiding (Type)
+import PGF.Data (Alternative(..), CncCat(..), CncFun(..), Concr(..), Expr(..), 
+                 FId, FunId, LIndex, Literal(..),  Production(..), PArg(..), 
+                 Sequence(..), SeqId, Symbol(..), fidFloat, fidInt, fidString, 
+                 fidVar)
 
 import GF.Infra.Option
 import GF.Grammar hiding (Env, mkRecord, mkTable)
--- gf-3.3-orig/src/compiler/GF/Command/Abstract.hs	2011-10-26 06:03:36.000000000 +1100
+++ gf-3.3/src/compiler/GF/Command/Abstract.hs	2011-11-05 21:46:56.418704939 +1100
@@ -1,7 +1,7 @@
 module GF.Command.Abstract where
 
 import PGF.CId
-import PGF.Data
+import PGF.Data (Expr(..))
 
 type Ident = String
 
