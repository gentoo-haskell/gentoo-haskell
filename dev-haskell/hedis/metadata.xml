<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<herd>haskell</herd>
	<maintainer>
		<email>haskell@gentoo.org</email>
	</maintainer>
	<longdescription>
		Redis is an open source, advanced key-value store. It is often referred to
		as a data structure server since keys can contain strings, hashes, lists,
		sets and sorted sets. This library is a Haskell client for the Redis
		datastore. Compared to other Haskell client libraries it has some
		advantages:
		
		[Complete Redis 2.6 command set:] All Redis commands
		(&lt;http://redis.io/commands&gt;) are available as haskell functions, except
		for the MONITOR and SYNC commands. Additionally, a low-level API is
		exposed that  makes it easy for the library user to implement further
		commands, such as new commands from an experimental Redis version.
		
		[Automatic Optimal Pipelining:] Commands are pipelined
		(&lt;http://redis.io/topics/pipelining&gt;) as much as possible without any
		work by the user. See
		&lt;http://informatikr.com/2012/redis-pipelining.html&gt; for a
		technical explanation of automatic optimal pipelining.
		
		[Enforced Pub\/Sub semantics:] When subscribed to the Redis Pub\/Sub server
		(&lt;http://redis.io/topics/pubsub&gt;), clients are not allowed to issue
		commands other than subscribing to or unsubscribing from channels. This
		library uses the type system to enforce the correct behavior.
		
		[Connect via TCP or Unix Domain Socket:] TCP sockets are the default way to
		connect to a Redis server. For connections to a server on the same
		machine, Unix domain sockets offer higher performance than the standard
		TCP connection.
		
		For detailed documentation, see the &quot;Database.Redis&quot; module.
		
		[Changes since version 0.5]
		
		* New commands: DUMP, RESTORE, BITOP, BITCOUNT.
		
		* Removed the dependency on stm.
		
		* Improved performance of Queued in long transactions.
		
		* Minor documentation updates.
		
		[Changes since version 0.4.1]
		
		* Added new Redis 2.6 commands, including Lua scripting support.
		
		* A transaction context is now created by using the &#39;multiExec&#39; function.
		The functions &#39;multi&#39;, &#39;exec&#39; and &#39;discard&#39; are no longer available
		individually.
		
		* Inside of a transaction, commands return their results wrapped in a
		composable /future/, called &#39;Queued&#39;.
		
		* The &#39;getType&#39; command (the Redis TYPE command) now has a custom return
		type &#39;RedisType&#39;.
		
		* Minor improvements and fixes to the documentation.
		
	</longdescription>
</pkgmetadata>
