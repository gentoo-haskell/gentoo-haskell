--- encoding-0.6.5-orig/Data/Encoding/Preprocessor/XMLMapping.hs	2011-04-25 23:09:25.000000000 +1000
+++ encoding-0.6.5/Data/Encoding/Preprocessor/XMLMapping.hs	2011-07-28 23:38:21.546242046 +1000
@@ -8,6 +8,7 @@
 import Data.Char
 import Text.XML.HaXml.XmlContent
 import Text.XML.HaXml.OneOfN
+import Text.XML.HaXml.Types (QName(..))
 
 testFile :: FilePath -> IO CharacterMapping
 testFile fp = fReadXml fp
@@ -130,7 +131,7 @@
     toHType x = Defined "characterMapping" [] []
 instance XmlContent CharacterMapping where
     toContents (CharacterMapping as a b c) =
-        [CElem (Elem "characterMapping" (toAttrs as) (maybe [] toContents a
+        [CElem (Elem (N "characterMapping") (toAttrs as) (maybe [] toContents a
                                                       ++ toContents b
                                                       ++ toContents c)) ()]
     parseContents = do
@@ -166,29 +167,35 @@
         ]
 
 instance XmlAttrType CharacterMapping_bidiOrder where
-    fromAttrToTyp n (n',v)
+    fromAttrToTyp n (q,v)
         | n==n'     = translate (attr2str v)
         | otherwise = Nothing
       where translate "logical" = Just CharacterMapping_bidiOrder_logical
             translate "RTL" = Just CharacterMapping_bidiOrder_RTL
             translate "LTR" = Just CharacterMapping_bidiOrder_LTR
             translate _ = Nothing
-    toAttrFrTyp n CharacterMapping_bidiOrder_logical = Just (n, str2attr "logical")
-    toAttrFrTyp n CharacterMapping_bidiOrder_RTL = Just (n, str2attr "RTL")
-    toAttrFrTyp n CharacterMapping_bidiOrder_LTR = Just (n, str2attr "LTR")
+            n' = case q of
+                 (N n'')    -> n''
+                 (QN _ n'') -> n''
+    toAttrFrTyp n CharacterMapping_bidiOrder_logical = Just (N n, str2attr "logical")
+    toAttrFrTyp n CharacterMapping_bidiOrder_RTL = Just (N n, str2attr "RTL")
+    toAttrFrTyp n CharacterMapping_bidiOrder_LTR = Just (N n, str2attr "LTR")
 
 instance XmlAttrType CharacterMapping_combiningOrder where
-    fromAttrToTyp n (n',v)
-        | n==n'     = translate (attr2str v)
+    fromAttrToTyp n (q,v)
+        | n==n'    = translate (attr2str v)
         | otherwise = Nothing
       where translate "before" = Just CharacterMapping_combiningOrder_before
             translate "after" = Just CharacterMapping_combiningOrder_after
             translate _ = Nothing
-    toAttrFrTyp n CharacterMapping_combiningOrder_before = Just (n, str2attr "before")
-    toAttrFrTyp n CharacterMapping_combiningOrder_after = Just (n, str2attr "after")
+            n' = case q of
+                (N n'')    -> n''
+                (QN _ n'') -> n''
+    toAttrFrTyp n CharacterMapping_combiningOrder_before = Just (N n, str2attr "before")
+    toAttrFrTyp n CharacterMapping_combiningOrder_after = Just (N n, str2attr "after")
 
 instance XmlAttrType CharacterMapping_normalization where
-    fromAttrToTyp n (n',v)
+    fromAttrToTyp n (q,v)
         | n==n'     = translate (attr2str v)
         | otherwise = Nothing
       where translate "undetermined" = Just CharacterMapping_normalization_undetermined
@@ -197,17 +204,23 @@
             translate "NFD" = Just CharacterMapping_normalization_NFD
             translate "NFC_NFD" = Just CharacterMapping_normalization_NFC_NFD
             translate _ = Nothing
-    toAttrFrTyp n CharacterMapping_normalization_undetermined = Just (n, str2attr "undetermined")
-    toAttrFrTyp n CharacterMapping_normalization_neither = Just (n, str2attr "neither")
-    toAttrFrTyp n CharacterMapping_normalization_NFC = Just (n, str2attr "NFC")
-    toAttrFrTyp n CharacterMapping_normalization_NFD = Just (n, str2attr "NFD")
-    toAttrFrTyp n CharacterMapping_normalization_NFC_NFD = Just (n, str2attr "NFC_NFD")
+            n' = case q of
+                (N n'')    -> n''
+                (QN _ n'') -> n''
+    toAttrFrTyp n CharacterMapping_normalization_undetermined = Just (N n, str2attr "undetermined")
+    toAttrFrTyp n CharacterMapping_normalization_neither = Just (N n, str2attr "neither")
+    toAttrFrTyp n CharacterMapping_normalization_NFC = Just (N n, str2attr "NFC")
+    toAttrFrTyp n CharacterMapping_normalization_NFD = Just (N n, str2attr "NFD")
+    toAttrFrTyp n CharacterMapping_normalization_NFC_NFD = Just (N n, str2attr "NFC_NFD")
 
 instance XmlAttrType ByteSequence where
-    fromAttrToTyp n (n',v)
+    fromAttrToTyp n (q,v)
         | n==n' = parseByteSequence (attr2str v)
         | otherwise = Nothing
-    toAttrFrTyp n bs = Just (n, str2attr $ show bs)
+      where n' = case q of
+                 (N n'')    -> n''
+                 (QN _ n'') -> n''
+    toAttrFrTyp n bs = Just (N n, str2attr $ show bs)
 
 parseByteSequence :: String -> Maybe ByteSequence
 parseByteSequence str = do
@@ -221,10 +234,13 @@
     show (BS seq) = foldl (\f w -> f . (showChar ' ') . (showHex w)) id seq ""
 
 instance XmlAttrType CodePoints where
-    fromAttrToTyp n (n',v)
+    fromAttrToTyp n (q,v)
         | n==n' = parseCodePoints (attr2str v)
         | otherwise = Nothing
-    toAttrFrTyp n bs = Just (n, str2attr $ show bs)
+      where n' = case q of
+                 (N n'')    -> n''
+                 (QN _ n'') -> n''
+    toAttrFrTyp n bs = Just (N n, str2attr $ show bs)
 
 parseCodePoints :: String -> Maybe CodePoints
 parseCodePoints str = do
@@ -241,7 +257,7 @@
     toHType x = Defined "stateful_siso" [] []
 instance XmlContent Stateful_siso where
     toContents (Stateful_siso a b) =
-        [CElem (Elem "stateful_siso" [] (toContents a ++ toContents b)) ()]
+        [CElem (Elem (N "stateful_siso") [] (toContents a ++ toContents b)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["stateful_siso"]
         ; interior e $ return (Stateful_siso) `apply` parseContents
@@ -252,7 +268,7 @@
     toHType x = Defined "history" [] []
 instance XmlContent History where
     toContents (History a) =
-        [CElem (Elem "history" [] (toContents a)) ()]
+        [CElem (Elem (N "history") [] (toContents a)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["history"]
         ; interior e $ return (History) `apply` parseContents
@@ -262,7 +278,7 @@
     toHType x = Defined "modified" [] []
 instance XmlContent Modified where
     toContents (Modified as a) =
-        [CElem (Elem "modified" (toAttrs as) (toText a)) ()]
+        [CElem (Elem (N "modified") (toAttrs as) (toText a)) ()]
     parseContents = do
         { e@(Elem _ as _) <- element ["modified"]
         ; interior e $ return (Modified (fromAttrs as))
@@ -283,7 +299,7 @@
     toHType x = Defined "validity" [] []
 instance XmlContent Validity where
     toContents (Validity a) =
-        [CElem (Elem "validity" [] (toContents a)) ()]
+        [CElem (Elem (N "validity") [] (toContents a)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["validity"]
         ; interior e $ return (Validity) `apply` parseContents
@@ -293,7 +309,7 @@
     toHType x = Defined "state" [] []
 instance XmlContent State where
     toContents as =
-        [CElem (Elem "state" (toAttrs as) []) ()]
+        [CElem (Elem (N "state") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["state"]
         ; return (fromAttrs as)
@@ -319,7 +335,7 @@
     toHType x = Defined "assignments" [] []
 instance XmlContent Assignments where
     toContents (Assignments as a b c d e) =
-        [CElem (Elem "assignments" (toAttrs as) (concatMap toContents a ++
+        [CElem (Elem (N "assignments") (toAttrs as) (concatMap toContents a ++
                                                  concatMap toContents b ++ concatMap toContents c ++
                                                  concatMap toContents d ++
                                                  concatMap toContents e)) ()]
@@ -345,7 +361,7 @@
     toHType x = Defined "a" [] []
 instance XmlContent A where
     toContents as =
-        [CElem (Elem "a" (toAttrs as) []) ()]
+        [CElem (Elem (N "a") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["a"]
         ; return (fromAttrs as)
@@ -368,7 +384,7 @@
     toHType x = Defined "fub" [] []
 instance XmlContent Fub where
     toContents as =
-        [CElem (Elem "fub" (toAttrs as) []) ()]
+        [CElem (Elem (N "fub") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["fub"]
         ; return (fromAttrs as)
@@ -396,7 +412,7 @@
     toHType x = Defined "fbu" [] []
 instance XmlContent Fbu where
     toContents as =
-        [CElem (Elem "fbu" (toAttrs as) []) ()]
+        [CElem (Elem (N "fbu") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["fbu"]
         ; return (fromAttrs as)
@@ -418,7 +434,7 @@
     toHType x = Defined "sub1" [] []
 instance XmlContent Sub1 where
     toContents as =
-        [CElem (Elem "sub1" (toAttrs as) []) ()]
+        [CElem (Elem (N "sub1") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["sub1"]
         ; return (fromAttrs as)
@@ -440,7 +456,7 @@
     toHType x = Defined "range" [] []
 instance XmlContent Range where
     toContents as =
-        [CElem (Elem "range" (toAttrs as) []) ()]
+        [CElem (Elem (N "range") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["range"]
         ; return (fromAttrs as)
@@ -470,7 +486,7 @@
     toHType x = Defined "iso2022" [] []
 instance XmlContent Iso2022 where
     toContents (Iso2022 a b) =
-        [CElem (Elem "iso2022" [] (maybe [] toContents a ++
+        [CElem (Elem (N "iso2022") [] (maybe [] toContents a ++
                                    toContents b)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["iso2022"]
@@ -482,7 +498,7 @@
     toHType x = Defined "default2022" [] []
 instance XmlContent Default2022 where
     toContents as =
-        [CElem (Elem "default2022" (toAttrs as) []) ()]
+        [CElem (Elem (N "default2022") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["default2022"]
         ; return (fromAttrs as)
@@ -500,7 +516,7 @@
     toHType x = Defined "escape" [] []
 instance XmlContent Escape where
     toContents as =
-        [CElem (Elem "escape" (toAttrs as) []) ()]
+        [CElem (Elem (N "escape") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["escape"]
         ; return (fromAttrs as)
@@ -520,7 +536,7 @@
     toHType x = Defined "si" [] []
 instance XmlContent Si where
     toContents (Si a) =
-        [CElem (Elem "si" [] (toContents a)) ()]
+        [CElem (Elem (N "si") [] (toContents a)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["si"]
         ; interior e $ return (Si) `apply` parseContents
@@ -530,7 +546,7 @@
     toHType x = Defined "so" [] []
 instance XmlContent So where
     toContents (So a) =
-        [CElem (Elem "so" [] (toContents a)) ()]
+        [CElem (Elem (N "so") [] (toContents a)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["so"]
         ; interior e $ return (So) `apply` parseContents
@@ -540,7 +556,7 @@
     toHType x = Defined "ss2" [] []
 instance XmlContent Ss2 where
     toContents (Ss2 a) =
-        [CElem (Elem "ss2" [] (toContents a)) ()]
+        [CElem (Elem (N "ss2") [] (toContents a)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["ss2"]
         ; interior e $ return (Ss2) `apply` parseContents
@@ -550,7 +566,7 @@
     toHType x = Defined "ss3" [] []
 instance XmlContent Ss3 where
     toContents (Ss3 a) =
-        [CElem (Elem "ss3" [] (toContents a)) ()]
+        [CElem (Elem (N "ss3") [] (toContents a)) ()]
     parseContents = do
         { e@(Elem _ [] _) <- element ["ss3"]
         ; interior e $ return (Ss3) `apply` parseContents
@@ -560,7 +576,7 @@
     toHType x = Defined "designator" [] []
 instance XmlContent Designator where
     toContents as =
-        [CElem (Elem "designator" (toAttrs as) []) ()]
+        [CElem (Elem (N "designator") (toAttrs as) []) ()]
     parseContents = do
         { (Elem _ as []) <- element ["designator"]
         ; return (fromAttrs as)
