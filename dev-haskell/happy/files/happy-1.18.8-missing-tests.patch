--- happy-1.18.8-orig/happy.cabal	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/happy.cabal	2011-12-01 12:30:54.352465826 +1100
@@ -100,10 +100,13 @@
 	templates/GLR_Base.hs
 	templates/GenericTemplate.hs
 	templates/GLR_Lib.hs
+	tests/AttrGrammar001.y
+	tests/AttrGrammar002.y
 	tests/error001.y
 	tests/error001.stdout
 	tests/error001.stderr
 	tests/monad001.y
+	tests/monaderror.y
 	tests/Makefile
 	tests/TestMulti.ly
 	tests/Partial.ly
--- happy-1.18.8-orig/tests/Makefile	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/Makefile	2011-12-01 14:33:08.456648386 +1100
@@ -1,5 +1,5 @@
 HAPPY=../dist/build/happy/happy
-HC=ghc
+HC=ghc -package array -package mtl
 
 TESTS = Test.ly TestMulti.ly TestPrecedence.ly bug001.ly \
 	monad001.y monad002.ly precedence001.ly precedence002.y \
--- happy-1.18.8-orig/tests/Partial.ly	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/Partial.ly	2011-12-01 12:52:00.720963536 +1100
@@ -4,7 +4,7 @@
 and the type of the tokens the parser reads.
 
 > {
-> import Char
+> import Data.Char
 > }
 
 > %name calc Exp
--- happy-1.18.8-orig/tests/TestMulti.ly	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/TestMulti.ly	2011-12-01 12:52:00.631960738 +1100
@@ -4,7 +4,7 @@
 and the type of the tokens the parser reads.
 
 > {
-> import Char
+> import Data.Char
 > }
 
 > %name calcExp  Exp
--- happy-1.18.8-orig/tests/TestPrecedence.ly	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/TestPrecedence.ly	2011-12-01 12:52:00.592959512 +1100
@@ -4,7 +4,7 @@
 and the type of the tokens the parser reads.
 
 > {
-> import Char
+> import Data.Char
 > }
 
 > %name calc
--- happy-1.18.8-orig/tests/monad001.y	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/monad001.y	2011-12-01 12:52:00.509956904 +1100
@@ -3,8 +3,8 @@
 {
 module Main where
 
-import IO
-import Char
+import System.IO
+import Data.Char
 }
 
 %name calc
--- happy-1.18.8-orig/tests/monad002.ly	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/monad002.ly	2011-12-01 12:52:00.444954898 +1100
@@ -5,7 +5,7 @@
 > {-# OPTIONS_GHC -fglasgow-exts #-}
 > -- -fglasgow-exts required because P is a type synonym, and Happy uses it
 > -- unsaturated.
-> import Char
+> import Data.Char
 > }
 
 > %name calc
--- happy-1.18.8-orig/tests/precedence001.ly	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/precedence001.ly	2011-12-01 12:51:58.390890292 +1100
@@ -2,7 +2,7 @@
 
 > {
 > module Main where
-> import IO
+> import System.IO
 > import Control.Exception as Exception
 > }
 > 
--- happy-1.18.8-orig/tests/precedence002.y	2011-11-23 20:57:45.000000000 +1100
+++ happy-1.18.8/tests/precedence002.y	2011-12-01 12:51:58.148882915 +1100
@@ -2,7 +2,7 @@
 
 {
 module Main where
-import IO
+import System.IO
 import Control.Exception as Exception
 }
 
--- /dev/null	2011-12-01 11:21:25.890640263 +1100
+++ happy-1.18.8/tests/AttrGrammar001.y	2011-12-01 12:25:51.085873912 +1100
@@ -0,0 +1,68 @@
+{
+import Control.Monad (unless)
+}
+
+%tokentype { Char }
+
+%token a { 'a' }
+%token b { 'b' }
+%token c { 'c' }
+
+%attributetype { Attrs a }
+%attribute value { a }
+%attribute len   { Int }
+
+%name parse abcstring
+
+%monad { Maybe }
+
+%%
+
+abcstring 
+   : alist blist clist
+        { $$ = $1 ++ $2 ++ $3
+        ; $2.len = $1.len
+        ; $3.len = $1.len
+        }
+
+alist 
+   : a alist 
+        { $$ = $1 : $>
+        ; $$.len = $>.len + 1
+        }
+   |    { $$ = []; $$.len = 0 }
+
+blist 
+   : b blist
+        { $$ = $1 : $>
+        ; $>.len = $$.len - 1
+        }
+   |    { $$ = []
+        ; where failUnless ($$.len == 0) "blist wrong length" 
+        }
+
+clist
+   : c clist
+        { $$ = $1 : $>
+        ; $>.len = $$.len - 1
+        }
+   |    { $$ = []
+        ; where failUnless ($$.len == 0) "clist wrong length" 
+        }
+
+{
+happyError = error "parse error"
+failUnless b msg = unless b (fail msg)
+
+main = case parse "" of { Just _ -> 
+       case parse "abc" of { Just _ ->
+       case parse "aaaabbbbcccc" of { Just _ ->
+       case parse "abbcc" of { Nothing ->
+       case parse "aabcc" of { Nothing ->
+       case parse "aabbc" of { Nothing ->
+       putStrLn "Test works";
+       _ -> quit } ; _ -> quit }; _ -> quit };
+       _ -> quit } ; _ -> quit }; _ -> quit }
+
+quit = putStrLn "Test failed"
+}
--- /dev/null	2011-12-01 11:21:25.890640263 +1100
+++ happy-1.18.8/tests/AttrGrammar002.y	2011-12-01 12:25:51.086873987 +1100
@@ -0,0 +1,58 @@
+
+%tokentype { Char }
+
+%token minus { '-' }
+%token plus  { '+' }
+%token one   { '1' }
+%token zero  { '0' }
+
+%attributetype { Attrs }
+%attribute value { Integer }
+%attribute pos   { Int }
+
+%name parse start
+
+%monad { Maybe }
+
+%%
+
+start 
+   : num { $$ = $1 }
+
+num 
+   : bits        { $$ = $1       ; $1.pos = 0 }
+   | plus bits   { $$ = $2       ; $2.pos = 0 }
+   | minus bits  { $$ = negate $2; $2.pos = 0 }
+
+bits
+   : bit         { $$ = $1
+                 ; $1.pos = $$.pos 
+                 }
+
+   | bits bit    { $$ = $1 + $2
+                 ; $1.pos = $$.pos + 1
+                 ; $2.pos = $$.pos
+                 }
+
+bit
+   : zero        { $$ = 0 }
+   | one         { $$ = 2^($$.pos) }
+
+
+{
+happyError msg = fail $ "parse error: "++msg
+
+main = case parse ""      of { Nothing ->
+       case parse "abc"   of { Nothing ->
+       case parse "0"     of { Just 0  ->
+       case parse "1"     of { Just 1  ->
+       case parse "101"   of { Just 5  ->
+       case parse "111"   of { Just 7  ->
+       case parse "10001" of { Just 17 ->
+       putStrLn "Test worked";
+       _ -> quit }; _ -> quit }; _ -> quit };
+       _ -> quit }; _ -> quit }; _ -> quit };
+       _ -> quit }
+
+quit = putStrLn "Test Failed"
+}
--- /dev/null	2011-12-01 11:21:25.890640263 +1100
+++ happy-1.18.8/tests/ParGF.y	2011-08-13 12:54:42.513837256 +1000
@@ -0,0 +1,40 @@
+{-
+
+With Happy 1.17 this file produces "Internal Happy error" when run:
+
+$ happy ParGF.y && runghc ParGF.hs
+ParGF.hs: Internal Happy error
+
+The problem is that we always pass around the "current token".  When not
+using %lexer and we've run out of tokens, the current token is notHappyAtAll,
+which gets passed to happyError when there's an error.
+
+-}
+
+{
+}
+
+%name pGrammar
+
+%tokentype { String }
+%error { parseError }
+
+%token 
+ 'a' { "a" }
+
+%%
+
+Grammar :: { () }
+Grammar :  'a' 'a' { () } 
+
+{
+
+parseError :: [String] -> a
+-- commenting out the below line gets rid of the "Internal Happy Error"
+parseError ("":_) = error "bar"
+parseError _ = error "foo"
+
+main :: IO ()
+main = print $ pGrammar ["a"]
+
+}
--- /dev/null	2011-12-01 11:21:25.890640263 +1100
+++ happy-1.18.8/tests/monaderror.y	2011-12-01 12:17:50.527846027 +1100
@@ -0,0 +1,57 @@
+{
+module Main where
+
+import Data.Char
+import Control.Monad.Error
+import System.Exit
+}
+
+%name parseFoo
+%tokentype { Token }
+%error { handleError }
+
+%monad { ParseM } { (>>=) } { return }
+
+%token
+        'S'             { TokenSucc }
+        'Z'             { TokenZero }
+
+%%
+
+Exp         :       'Z'         { 0 }
+            |       'S' Exp     { $2 + 1 }
+
+{
+
+type ParseM a = Either ParseError a
+data ParseError
+        = ParseError (Maybe Token)
+        | StringError String
+    deriving (Eq,Show)
+instance Error ParseError where
+    strMsg = StringError
+
+data Token
+        = TokenSucc
+        | TokenZero
+    deriving (Eq,Show)
+
+handleError :: [Token] -> ParseM a
+handleError [] = throwError $ ParseError Nothing
+handleError ts = throwError $ ParseError $ Just $ head ts
+
+lexer :: String -> [Token]
+lexer [] = []
+lexer (c:cs)
+    | isSpace c = lexer cs
+    | c == 'S'  = TokenSucc:(lexer cs)
+    | c == 'Z'  = TokenZero:(lexer cs)
+    | otherwise = error "lexer error"
+
+main :: IO ()
+main = do
+    let tokens = lexer "S S"
+    when (parseFoo tokens /= Left (ParseError Nothing)) $ do
+        print (parseFoo tokens)
+        exitWith (ExitFailure 1)
+}
