--- certificate-0.7.0-orig/certificate.cabal	2011-02-21 04:32:51.000000000 +1100
+++ certificate-0.7.0/certificate.cabal	2011-04-20 20:30:48.157472421 +1000
@@ -30,7 +30,7 @@
                    , bytestring
                    , text >= 0.11
                    , mtl
-                   , asn1-data >= 0.4.6 && < 0.5
+                   , asn1-data >= 0.5 && < 0.6
                    , base64-bytestring
                    , directory
   Exposed-modules:   Data.Certificate.X509,
--- certificate-0.7.0-orig/Data/Certificate/X509Cert.hs	2011-02-21 04:32:37.000000000 +1100
+++ certificate-0.7.0/Data/Certificate/X509Cert.hs	2011-04-20 20:02:15.163945615 +1000
@@ -29,7 +29,7 @@
 import Data.ASN1.DER
 import Data.Maybe
 import Data.ByteString.Lazy (ByteString)
-import Data.Text.Lazy (Text)
+import Data.Text.Lazy (Text, pack, unpack)
 import qualified Data.ByteString.Lazy as L
 import Control.Monad.State
 import Control.Monad.Error
@@ -187,21 +187,21 @@
 		_                 -> throwError ("algorithm ID bad format " ++ show n)
 
 asn1String :: ASN1 -> ASN1String
-asn1String (PrintableString x) = (Printable, x)
-asn1String (UTF8String x)      = (UTF8, x)
-asn1String (UniversalString x) = (Univ, x)
-asn1String (BMPString x)       = (BMP, x)
-asn1String (IA5String x)       = (IA5, x)
-asn1String (T61String x)       = (IA5, x)
+asn1String (PrintableString x) = (Printable, pack x)
+asn1String (UTF8String x)      = (UTF8, pack x)
+asn1String (UniversalString x) = (Univ, pack x)
+asn1String (BMPString x)       = (BMP, pack x)
+asn1String (IA5String x)       = (IA5, pack x)
+asn1String (T61String x)       = (IA5, pack x)
 asn1String x                   = error ("not a print string " ++ show x)
 
 encodeAsn1String :: ASN1String -> ASN1
-encodeAsn1String (Printable, x) = PrintableString x
-encodeAsn1String (UTF8, x)      = UTF8String x
-encodeAsn1String (Univ, x)      = UniversalString x
-encodeAsn1String (BMP, x)       = BMPString x
-encodeAsn1String (IA5, x)       = IA5String x
-encodeAsn1String (T61, x)       = T61String x
+encodeAsn1String (Printable, x) = PrintableString $ unpack x
+encodeAsn1String (UTF8, x)      = UTF8String $ unpack x
+encodeAsn1String (Univ, x)      = UniversalString $ unpack x
+encodeAsn1String (BMP, x)       = BMPString $ unpack x
+encodeAsn1String (IA5, x)       = IA5String $ unpack x
+encodeAsn1String (T61, x)       = T61String $ unpack x
 
 parseCertHeaderDN :: ParseASN1 [ (OID, ASN1String) ]
 parseCertHeaderDN = do
