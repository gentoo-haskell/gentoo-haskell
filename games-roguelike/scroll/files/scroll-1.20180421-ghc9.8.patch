Updating for compatibility with recent base and unix
From 2f8a5f3670417aeb3b5fcd4ab0fd3f93bd6c3f8f Mon Sep 17 00:00:00 2001
From: GuillaumedeVolpiano <xavier@wheredoibegin.fr>
Date: Tue, 25 Feb 2025 18:21:50 +0100
Subject: [PATCH] udpating for compatibility with recent versions of base

---
 Control.hs        | 1 +
 Peruser.hs        | 2 ++
 Player.hs         | 1 +
 Player/Consume.hs | 1 +
 Player/Move.hs    | 1 +
 Poison.hs         | 1 +
 Spell.hs          | 3 +++
 Curses.hs         | 3 ++-
 World.hs          | 1 +
 scroll.cabal      | 2 +-
 unix/Pager.hs     | 5 +++++
 11 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/Control.hs b/Control.hs
index d11fdf9..ed23596 100644
--- a/Control.hs
+++ b/Control.hs
@@ -1,5 +1,6 @@
 module Control where
 
+import Control.Monad (when)
 import Control.Monad.State.Strict
 import qualified Data.Map as M
 import Data.Maybe
diff --git a/Peruser.hs b/Peruser.hs
index 26c30fb..0cfb847 100644
--- a/Peruser.hs
+++ b/Peruser.hs
@@ -1,6 +1,8 @@
 module Peruser where
 
 import Control.Monad.State.Strict
+import Control.Monad (when)
+import Data.Foldable (forM_)
 import qualified Data.Vector.Mutable as MV
 import qualified Data.Vector as V
 import Control.Monad.IfElse
diff --git a/Player.hs b/Player.hs
index 6db570c..6981ff7 100644
--- a/Player.hs
+++ b/Player.hs
@@ -1,6 +1,7 @@
 module Player where
 
 import Control.Monad.State.Strict
+import Control.Monad (forM)
 import qualified Data.Vector.Mutable as MV
 import Control.Applicative
 import Data.Maybe
diff --git a/Player/Consume.hs b/Player/Consume.hs
index a0a71cd..666c055 100644
--- a/Player/Consume.hs
+++ b/Player/Consume.hs
@@ -1,6 +1,7 @@
 module Player.Consume where
 
 import Control.Monad.State.Strict
+import Control.Monad (unless, when)
 import Data.Char
 import qualified Data.CaseInsensitive as CI
 import qualified Data.Map as M
diff --git a/Player/Move.hs b/Player/Move.hs
index 46a42bb..bae104a 100644
--- a/Player/Move.hs
+++ b/Player/Move.hs
@@ -3,6 +3,7 @@
 module Player.Move where
 
 import Control.Monad.State.Strict
+import Control.Monad (when)
 import Data.Char
 import Data.Maybe
 import Control.Applicative
diff --git a/Poison.hs b/Poison.hs
index 61e9b05..e27ae72 100644
--- a/Poison.hs
+++ b/Poison.hs
@@ -1,6 +1,7 @@
 module Poison where
 
 import Control.Monad.State.Strict
+import Control.Monad (when)
 import qualified Data.CaseInsensitive as CI
 import qualified Data.Map as M
 import Data.Char
diff --git a/Spell.hs b/Spell.hs
index c78f24a..0b2cebd 100644
--- a/Spell.hs
+++ b/Spell.hs
@@ -1,6 +1,9 @@
 module Spell where
 
 import Control.Monad.State.Strict
+importÂ Control.Monad (when)
+import Control.Monad.Compat ((<=<))
+import Data.Foldable (forM_)
 import qualified Data.Set as S
 import qualified Data.Map as M
 import qualified Data.CaseInsensitive as CI
diff --git a/Curses.hs b/Curses.hs
index da8d232..ca75a64 100644
--- a/Curses.hs
+++ b/Curses.hs
@@ -1,7 +1,8 @@
 module Term.Curses where
 
 import UI.NCurses hiding (Window)
-import Control.Monad.State.Strict
+import Control.Monad (void, unless, when)
+import Data.Foldable (forM_)
 import qualified Data.Vector as V
 import Data.Vector ((!))
 import Control.Applicative
diff --git a/World.hs b/World.hs
index ae049be..d2c31b6 100644
--- a/World.hs
+++ b/World.hs
@@ -6,6 +6,7 @@ import Control.Monad.ST
 import Control.Monad.State.Strict
 import qualified Data.Vector.Mutable as MV
 import Control.Applicative
+import Data.Foldable (forM_)
 import Prelude
 
 import Types
diff --git a/scroll.cabal b/scroll.cabal
index aa653bc..5e7fc84 100644
--- a/scroll.cabal
+++ b/scroll.cabal
@@ -31,7 +31,7 @@ Flag Unix
 Executable scroll
   Main-Is: Main.hs
   GHC-Options: -threaded -Wall -fno-warn-tabs
-  Build-Depends: base >= 4.5, base < 5, vector, bytestring, mtl,
+  Build-Depends: base >= 4.5, base < 5, base-compat, vector, bytestring, mtl,
     containers, ncurses, data-default, random, monad-loops, IfElse,
     case-insensitive, optparse-applicative, text
 
diff --git a/unix/Pager.hs b/unix/Pager.hs
index d36f875..e745960 100644
--- a/unix/Pager.hs
+++ b/unix/Pager.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 module Pager where
 
 import System.IO
@@ -20,7 +21,11 @@ stdinPager = go =<< queryTerminal stdInput
 				term <- getTerminalName stdOutput
 				oldstdin <- dup stdInput
 				closeFd stdInput
+#if MIN_VERSION_unix(2,8,0)
+				newstdin <- openFd term ReadOnly defaultFileFlags 
+#else
 				newstdin <- openFd term ReadOnly Nothing defaultFileFlags 
+#endif
 				_ <- dupTo newstdin stdInput
 				Just <$> (hGetContents =<< fdToHandle oldstdin)
 			else error "stdout is not a terminal"
-- 
2.45.3

