--- distr.orig/Makefile	2011-09-08 02:46:06.000000000 +1000
+++ distr/Makefile	2011-10-23 18:05:34.787973599 +1100
@@ -1,6 +1,7 @@
 MAIN             = Main
-EXT              = .exe
-EXEC             = omega$(EXT)
+EXT              = 
+#Have to change the name to avoid clashes with texlive-core
+EXEC             = omega-lang$(EXT)
 GHC              = ghc
 GHCI             = ghci
 GHC_FLAGS        = -auto-all $(GHC_OPT_FLAGS) $(GHC_FLAGS_COMMON)
--- distr.orig/Bind.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/Bind.hs	2011-10-23 18:45:24.433526401 +1100
@@ -82,7 +82,7 @@
 integer2Name = Nm
 
 ----------------------------------------------
-data (Freshen a,Swap b) => Bind a b = B a b
+data Bind a b = B a b
 
 bind :: (Freshen a,Swap b) => a -> b -> Bind a b
 bind a b = B a b
--- distr.orig/Toplevel.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/Toplevel.hs	2011-10-23 18:48:23.277196292 +1100
@@ -8,10 +8,10 @@
 {-# LANGUAGE RankNTypes #-}
 module Toplevel where
 
-import Char(isAlpha,isDigit)
-import List(partition,(\\),nub,find,deleteBy,sort)
+import Data.Char(isAlpha,isDigit)
+import Data.List(partition,(\\),nub,find,deleteBy,sort)
 import Data.Map(Map,toList)
-import IO
+import System.IO
 
 import Version(version,buildtime)
 import Syntax
@@ -23,7 +23,7 @@
              ,errF,report,writeRef)
 import Auxillary(plist,plistf,foldrM,backspace,Loc(..),extendL,DispInfo,DispElem(..),eitherM)
 import SCC(topSortR)
-import Monad(when)
+import Control.Monad(when)
 import Infer(TcEnv(sourceFiles,tyfuns),completionEntry,lineEditReadln,initTcEnv
              ,mode0,modes,checkDecs,imports,addListToFM,appendFM2
              ,var_env,type_env,rules,runtime_env,syntaxExt)
@@ -33,7 +33,7 @@
 import Commands
 import SyntaxExt(synName,synKey)
 
-import System(getArgs)
+import System.Environment(getArgs)
 import System.Time(ClockTime,getClockTime)
 import System.IO(hClose)
 import System.IO.Error(try,ioeGetErrorString)
--- distr.orig/Manual.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/Manual.hs	2011-10-23 17:54:16.045637963 +1100
@@ -7,8 +7,8 @@
 
 module Manual where
 
-import IO (openFile,hClose,IOMode(..),hPutStr,stdout)
-import Char(isAlpha,isDigit)
+import System.IO (openFile,hClose,IOMode(..),hPutStr,stdout)
+import Data.Char(isAlpha,isDigit)
 
 -- Parts of the manual are generated automatically from the
 -- sources, by generating LaTex files by observing the
--- distr.orig/Infer.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/Infer.hs	2011-10-23 17:54:07.159359556 +1100
@@ -11,7 +11,7 @@
   #-}
 module Infer where
 
-import Char(isAlpha,isUpper)
+import Data.Char(isAlpha,isUpper)
 import qualified Data.Map as Map
 import Data.List(intersperse)
 import Data.IORef(newIORef,readIORef,writeIORef,IORef)
@@ -21,7 +21,7 @@
 
 import PureReadline
 
-import Monad(when,foldM,liftM,filterM)
+import Control.Monad(when,foldM,liftM,filterM)
 import Monads(Mtc(..),runTC,testTC,unTc,handleTC,TracksLoc(..)
              ,Exception(..), fixMtc
              ,FIO(..),fio,failP,fio2Mtc,runFIO,io2Mtc
@@ -68,7 +68,7 @@
             ,Docs(..),docs,dPoly)
 import SyntaxExt(SynExt(..),Extension(..),synKey,synName,extKey
                 ,buildExt,listx,pairx,natx,wExt,duplicates,checkClause,checkMany,liftEither)
-import List((\\),partition,sort,sortBy,nub,union,unionBy
+import Data.List((\\),partition,sort,sortBy,nub,union,unionBy
            ,find,deleteFirstsBy,groupBy,intersect)
 import Encoding
 import Auxillary(plist,plistf,Loc(..),report,foldrM,foldlM,extend,extendL,backspace,prefix
--- distr.orig/Cooper.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/Cooper.hs	2011-10-23 17:53:53.776940767 +1100
@@ -54,8 +54,8 @@
 SUCH DAMAGE.
 -}
 
-import Char(isDigit)
-import List(sortBy,nub)
+import Data.Char(isDigit)
+import Data.List(sortBy,nub)
 import Auxillary(plist,plistf,DispElem(..))
 import RankN(Tau(..),Pred(..),warnM,TcTv)
 import Monads(fio,fio2Mtc)
--- distr.orig/Narrow.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/Narrow.hs	2011-10-23 17:53:43.768627584 +1100
@@ -10,10 +10,10 @@
   #-}
 module Narrow(narr,defTree,Check(..),matches) where
 
-import List(union,find,partition)
+import Data.List(union,find,partition)
 import Auxillary(maybeM,plistf,plist,DispElem(..),displays
                 ,Display(..),DispInfo,initDI)
-import Monad(when)
+import Control.Monad(when)
 import Monads
 import Bind(Name)
 import RankN
--- distr.orig/Commands.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/Commands.hs	2011-10-23 17:53:34.270330373 +1100
@@ -16,12 +16,12 @@
 import Monads(FIO(..),unFIO,runFIO,fixFIO,fio,resetNext
              ,write,writeln,readln,unTc,report,readRef,tryAndReport,fio,writeRef)
 import Version(version,buildtime)
-import List(find)
+import Data.List(find)
 import LangEval(Env(..),env0,eval,elaborate,Prefix(..),mPatStrict,extendV)
-import Char(isAlpha,isDigit)
+import Data.Char(isAlpha,isDigit)
 import ParserDef(getInt,getBounds,expr,parseString)
 import Auxillary(plist,plistf,DispElem(..),prefix,maybeM,anyM,ifM,foldrM,initDI)
-import Monad(when)
+import Control.Monad(when)
 import Value(pv)
 import SCC(topSortR)
 import System.Directory(getModificationTime)
--- distr.orig/LangEval.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/LangEval.hs	2011-10-23 17:53:29.716187876 +1100
@@ -11,18 +11,18 @@
 import Auxillary
 import Syntax
 import Encoding
-import Monad(foldM)
+import Control.Monad(foldM)
 import Monads(Exception(..), FIO(..),unFIO,handle,runFIO,fixFIO,fio,
               write,writeln,HasNext(..),HasOutput(..))
 import Value
 import RankN --(Sigma,runType,liftType, sigma4Eq,sigma4Hide,ToEnv,
              -- star,star_star,poly,intT)
 import RankN(Z)
-import Char(chr,ord)
+import Data.Char(chr,ord)
 
 import ParserDef(pe)
 import System.IO.Unsafe(unsafePerformIO)
-import List(union,unionBy,(\\),find)
+import Data.List(union,unionBy,(\\),find)
 import Bind
 import Parser((<|>),(<?>),Parser)
 import PrimParser(charLitV,intLitV,parserPairs,runParser)
--- distr.orig/Encoding.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/Encoding.hs	2011-10-23 17:53:17.516806166 +1100
@@ -8,13 +8,13 @@
 {-# LANGUAGE TypeSynonymInstances #-}
 module Encoding where
 
-import Maybe
+import Data.Maybe
 import Monads
-import Monad (liftM)
+import Control.Monad (liftM)
 import RankN
 import Syntax
 import Value
-import List(unionBy)
+import Data.List(unionBy)
 import Bind
 import SyntaxExt(SynExt(..),listx,normalList)
 import Parser
--- distr.orig/ParserDef.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/ParserDef.hs	2011-10-23 17:52:59.391239080 +1100
@@ -25,13 +25,13 @@
              ,binop,opList,var,freshE,swp,dvars,evars,
              typeStrata,kindStrata,emptyF,Vars(..),boundBy
              ,monadDec,Derivation(..),ImportItem(..),FX(..),typVar)
-import List(partition)
+import Data.List(partition)
 import Monads
 import RankN(PT(..),typN,simpletyp,proposition,pt,allTyp
             ,ptsub,getFree,parse_tag,props,typingHelp,typing,conName,arityPT)
 import SyntaxExt  -- (Extension(..),extP,SynExt(..),buildNat,pairP)
 import Auxillary(Loc(..),plistf,plist)
-import Char(isLower,isUpper)
+import Data.Char(isLower,isUpper)
 ---------------------------------------------------------
 
 loc p = SrcLoc (sourceName p) (sourceLine p) (sourceColumn p)
--- distr.orig/Value.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/Value.hs	2011-10-23 17:52:45.613808063 +1100
@@ -11,7 +11,7 @@
 module Value where
 import Auxillary(plist,plistf)
 import Monads(FIO,fio,HasNext(..))
-import Monad
+import Control.Monad
 import Syntax
 import Data.IORef(newIORef,readIORef,writeIORef,IORef)
 import Bind
--- distr.orig/Syntax.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/Syntax.hs	2011-10-23 17:52:40.521648763 +1100
@@ -14,17 +14,17 @@
 module Syntax where
 
 import Bind
-import Monad
+import Control.Monad
 import Monads
 import Data.IORef(newIORef,readIORef,writeIORef,IORef)
 import Auxillary
-import List(elem,nub,union,(\\),partition,find)
+import Data.List(elem,nub,union,(\\),partition,find)
 import RankN(PT(..),showp,getAll,getFree,getFreePredL,applyT',ptsub,ppredsub
             ,getMult,PPred(..),Pred(..),Quant(..)
             ,definesValueConstr,short)
 
 import SyntaxExt(Extension(..),extList,extKey,extM,ppExt,extThread,SynExt(..),synKey,synName)
-import Char(isLower,isUpper,ord,chr)
+import Data.Char(isLower,isUpper,ord,chr)
 import qualified Text.PrettyPrint.HughesPJ as PP
 import Text.PrettyPrint.HughesPJ(Doc,text,int,(<>),(<+>),($$),($+$),render)
 
--- distr.orig/Monads.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/Monads.hs	2011-10-23 17:52:25.808188519 +1100
@@ -17,7 +17,7 @@
 import System.IO(fixIO)
 import System.IO.Unsafe(unsafePerformIO)
 import Auxillary(Loc(..),displays)
-import IO(hFlush,stdout)
+import System.IO(hFlush,stdout)
 import ParserAll
 
 -------------------------------------------------------------
--- distr.orig/RankN.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/RankN.hs	2011-10-23 17:52:20.444020708 +1100
@@ -19,8 +19,8 @@
 import Data.IORef(newIORef,readIORef,writeIORef,IORef)
 import System.IO.Unsafe(unsafePerformIO)
 import Monads
-import Monad(when,foldM)
-import List((\\),nub,union,unionBy,sortBy,groupBy,partition,find)
+import Control.Monad(when,foldM)
+import Data.List((\\),nub,union,unionBy,sortBy,groupBy,partition,find)
 import Auxillary(Loc(..),plist,plistf,extendM,foldrM,makeNames
                 ,DispInfo(..),Display(..),useDisplay,initDI
                 ,disp2,disp3,disp4,disp5,dispL,DispElem(..),displays,dv,tryDisplay
@@ -28,7 +28,7 @@
 import ParserAll  -- This for defining the parser for types
 -- To import ParserAll you must define CommentDef.hs and TokenDef.hs
 -- These should be in the same directory as this file.
-import Char(isLower,isUpper,ord,chr)
+import Data.Char(isLower,isUpper,ord,chr)
 
 import qualified Text.PrettyPrint.HughesPJ as PP
 import Text.PrettyPrint.HughesPJ(Doc,text,int,(<>),(<+>),($$),($+$),render)
--- distr.orig/DepthFirstSearch.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/DepthFirstSearch.hs	2011-10-23 17:52:06.067571030 +1100
@@ -15,7 +15,7 @@
 module DepthFirstSearch where
 import Control.Monad.ST
 import Data.Array.ST
-import qualified Array as A
+import qualified Data.Array as A
 
 type Vertex  = Int
 
--- distr.orig/SCC.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/SCC.hs	2011-10-23 17:52:01.123416391 +1100
@@ -9,7 +9,7 @@
 module SCC where
 
 import DepthFirstSearch
-import List(findIndex)
+import Data.List(findIndex)
  
 
 topSort :: (Show a,Eq a) => (d -> [a]) -> [(a,d)] -> [[(a,d)]]
--- distr.orig/Auxillary.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/Auxillary.hs	2011-10-23 17:51:55.510240844 +1100
@@ -10,8 +10,8 @@
   #-}
 module Auxillary where
 
-import Char(isAlpha)
-import List(find,union)
+import Data.Char(isAlpha)
+import Data.List(find,union)
 
 
 whenM :: Monad m => m Bool -> m b -> [Char] -> m b
--- distr.orig/SyntaxExt.hs	2011-09-08 02:46:06.000000000 +1000
+++ distr/SyntaxExt.hs	2011-10-23 17:51:45.018912701 +1100
@@ -8,11 +8,11 @@
 module SyntaxExt where
 
 import Auxillary
-import List(nub)
+import Data.List(nub)
 import ParserAll  -- This for defining parsers
 -- To import ParserAll you must define CommentDef.hs and TokenDef.hs
 -- These should be in the same directory as this file.
-import Char(isLower)
+import Data.Char(isLower)
 
 import qualified Text.PrettyPrint.HughesPJ as PP
 import Text.PrettyPrint.HughesPJ(Doc,text,int,(<>),(<+>),($$),($+$),render)
--- distr.orig/ParseToken.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/ParseToken.hs	2011-10-23 17:51:39.456738740 +1100
@@ -25,8 +25,8 @@
                  , layout
                  ) where
 
-import Char         (isSpace,digitToInt,isAlpha,toLower,toUpper)
-import List         (nub,sort)
+import Data.Char    (isSpace,digitToInt,isAlpha,toLower,toUpper)
+import Data.List    (nub,sort)
 import Parser
 import StdTokenDef  (TokenDef(..))
 import TokenDef     (tokenDef)
--- distr.orig/ParseExpr.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/ParseExpr.hs	2011-10-23 17:51:24.430268823 +1100
@@ -15,7 +15,7 @@
                 , buildExpressionParser
                 ) where
 
-import Char
+import Data.Char
 import Parser
 
 
--- distr.orig/ParseError.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/ParseError.hs	2011-10-23 17:51:18.849094292 +1100
@@ -28,7 +28,7 @@
                   where
 
 
-import List     (nub,sortBy)
+import Data.List  (nub,sortBy)
 
 -----------------------------------------------------------
 -- Source Positions
--- distr.orig/Parser.hs	2011-09-08 02:46:05.000000000 +1000
+++ distr/Parser.hs	2011-10-23 17:51:09.446800278 +1100
@@ -78,9 +78,9 @@
 
 import ParseError
 import CommentDef
-import Monad
-import Char
-import List(nub)
+import Control.Monad
+import Data.Char
+import Data.List(nub)
 import System.IO(hGetContents,Handle)
 
 -----------------------------------------------------------
